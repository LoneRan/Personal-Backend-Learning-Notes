# C++ virtual function and polymorphism
Let's see what an example:
```
#include <iostream>
using namespace std;

class Animal
{
 public:
 void my_features()
 {
 cout << "I am an animal.";
 }
};

class Mammal : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a mammal.";
 }
};
class Reptile : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a reptile.";
 }
};

int main()
{
 Animal *obj1 = new Animal;
 Mammal *obj2 = new Mammal;
 Reptile *obj3 = new Reptile;

 obj1->my_features();
 obj2->my_features();
 obj3->my_features();

 return 0;
}
```

Output:
```
I am an animal.
I am a mammal.
I am a reptile.
```
This works as expected, however if we use an intermediate function to implement, it will fail:
```
#include <iostream>
using namespace std;

class Animal
{
 public:
 void my_features()
 {
 cout << "I am an animal.";
 }
};

class Mammal : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a mammal.";
 }
};
class Reptile : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a reptile.";
 }
};

//intermediate function
void intermediate_func(Animal *a1)
{
 a1->my_features();
}

int main()
{
 Animal *obj1 = new Animal;
 Mammal *obj2 = new Mammal;
 Reptile *obj3 = new Reptile;

 intermediate_func(obj1);
 intermediate_func(obj2);
 intermediate_func(obj3);

 return 0;
}
```
Output:
```
I am an animal.
I am an animal.
I am an animal.
```
This happens cuz when calling `my_features()`, there is ambiguity. 

Virtual function dynamically **binds function call at runtime** and allows it to be **overridden** by the member function of the derived class:
```
#include <iostream>
using namespace std;

class Animal
{
 public:
 virtual void my_features()
 {
 cout << "I am an animal.";
 }
};

class Mammal : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a mammal.";
 }
};
class Reptile : public Animal
{
 public:
 void my_features()
 {
 cout << "\nI am a reptile.";
 }
};

//intermediate function
void intermediate_func(Animal *a1)
{
 a1->my_features();
}

int main()
{
 Animal *obj1 = new Animal;
 Mammal *obj2 = new Mammal;
 Reptile *obj3 = new Reptile;

 intermediate_func(obj1);
 intermediate_func(obj2);
 intermediate_func(obj3);

 return 0;
}
```
Output:
```
I am an animal.
I am a mammal.
I am a reptile.
```
Works as predicted now!